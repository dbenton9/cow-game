{"version":3,"sources":["components/HomePage.js","components/CowPage.js","components/FiveCrowns/ScoreRow.js","components/FiveCrowns/ScoreBoard.js","components/FiveCrowns/FiveCrowns.js","index.js"],"names":["HomePage","console","log","react_default","a","createElement","Player","props","player","name","className","onClick","score","immortalScore","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","players","data","window","localStorage","getItem","JSON","parse","setState","value","index","changingPlayer","Number","isInteger","Math","ceil","splice","setItem","stringify","event","target","alert","preventDefault","_this2","playersList","map","key","scoreChange","onSubmit","handleSubmit","type","onChange","handleChange","React","Component","ScoreRow","_ref","playerData","numberOfRounds","onRemove","updatePlayersData","_useState","useState","_useState2","slicedToArray","playerName","_useState3","rounds","_useState4","setRoundScore","_useState5","_useState6","total","setTotal","useEffect","newTotal","reduce","round","prevRounds","updatedRounds","toConsumableArray","length","i","push","align","inputs","_loop","style","width","e","roundNumber","newScore","parseInt","handleRoundChange","numberOfRoundInputs","ScoreBoard","playersData","setPlayers","newPlayerName","setNewPlayerName","prevPlayerStats","newPlayersStats","Table","striped","border","hover","responsive","size","headers","roundsLength","roundHeaders","FiveCrowns_ScoreRow","playNameToRemove","confirm","concat","updatedPlayers","handleRemovePlayer","objectSpread","placeholder","Button","trim","Array","from","variant","FiveCrowns","setNumberOfRounds","Container","htmlFor","handleNumberOfRoundsChange","options","FiveCrowns_ScoreBoard","ReactDOM","createRoot","document","getElementById","render","dist","basename","Navbar","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","react_router_dist","path","element","components_HomePage","CowPage","components_FiveCrowns_FiveCrowns"],"mappings":"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","file":"static/js/main.72f1f1fe.chunk.js","sourcesContent":["import React from 'react';\n\nfunction HomePage() {\n    console.log('am i rendering')\n    return (\n        <div>\n            <h1>Welcome to the Home Page</h1>\n            {/* Add content for your home page */}\n        </div>\n    );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport ReactDOM from 'react-dom/client'\n\nfunction Player(props) {\n    // useEffect(() => {\n    //   console.log(props.player.name, 'showBanner', props.player.score)\n    // }, [props.player.score])\n\n    return (\n        <div>\n            <h4>{props.player.name} </h4>\n            <button className='decrement' onClick={() =>props.onClick(-1)}>-1</button>\n            <div className='score'>{props.player.score + props.player.immortalScore} Cows</div>\n            <button className='increment' onClick={() => props.onClick(1)}>+1</button>\n            <button className='increment' onClick={() => props.onClick('immortal')}>Immortal Cows ({props.player.immortalScore})</button>\n            <button className='graveyard' onClick={() => props.onClick('graveyard')}>Graveyard</button>\n        </div>\n    );\n}\n\nfunction AddPlayerForm() {\n    return (\n        <form onSubmit={this.handleSubmit}>\n            <label> Add Player </label>\n            <input type=\"text\" id=\"name\"></input>\n            <input type=\"submit\"></input>\n        </form>\n    )\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [{\n                name: \"Berkley\",\n                score: 0,\n                immortalScore: 0,\n            }, {\n                name: \"Shelby\",\n                score: 0,\n                immortalScore: 0,\n            }\n            ],\n        }\n    }\n\n    componentDidMount() {\n        const data = window.localStorage.getItem('PLAYERS');\n        if (JSON.parse(data) != null) {\n            this.setState({\n                players: JSON.parse(data)\n            })\n        }\n    }\n\n    scoreChange(value, index) {\n        const changingPlayer = this.state.players[index]\n        if (Number.isInteger(value)) {\n            changingPlayer.score = changingPlayer.score + value\n        } else if (value == 'immortal') {\n            changingPlayer.immortalScore += 1\n        } else if (value == 'graveyard') {\n            changingPlayer.score = Math.ceil(changingPlayer.score * 0.5)\n        }\n        this.state.players.splice(index, 1, changingPlayer)\n        this.setState({\n            players: this.state.players,\n        })\n\n        window.localStorage.setItem('PLAYERS', JSON.stringify(this.state.players));\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        alert('A name was submitted: ' + this.state.value);\n        event.preventDefault();\n    }\n\n    render() {\n        const playersList = this.state.players.map((player, index) => {\n            return (\n                <li key={index}>\n                    <Player player={player} onClick={(value) => this.scoreChange(value, index)}/>\n                </li>\n            )\n        });\n\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label> Add Player </label>\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange}></input>\n                    <input type=\"submit\" value=\"submit\"></input>\n                </form>\n                <ul>\n                    {playersList}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Game;\n","import React, {useState, useEffect} from 'react';\n\nexport const ScoreRow = ({playerData, numberOfRounds, onRemove, updatePlayersData}) => {\n    const [playerName, setPlayerName] = useState(playerData.name);\n    const [rounds, setRoundScore] = useState(playerData.rounds);\n    const [total, setTotal] = useState(0);\n\n    useEffect(() => {\n        // BUG: calculating total off of old 'rounds' when numberOfRounds is changed\n        const newTotal = rounds.reduce((total, round) => total + round, 0);\n        setTotal(newTotal)\n    }, [rounds]);\n\n    useEffect(() => {\n        setRoundScore(playerData.rounds);\n        console.log(\"rounds \" + playerData.rounds)\n    }, [playerData]);\n\n    // Update the rounds whenever numberOfRounds changes\n    useEffect(() => {\n        setRoundScore((prevRounds) => {\n            // Logic to adjust rounds based on numberOfRounds\n            const updatedRounds = [...prevRounds];\n\n            if (updatedRounds.length < numberOfRounds) {\n                // Add additional rounds if numberOfRounds increased\n                for (let i = updatedRounds.length; i < numberOfRounds; i++) {\n                    updatedRounds.push(0);\n                }\n            } else if (updatedRounds.length > numberOfRounds) {\n                // Remove excess rounds if numberOfRounds decreased\n                updatedRounds.splice(numberOfRounds);\n            }\n\n            return updatedRounds;\n        });\n    }, [numberOfRounds]);\n\n    const handleRoundChange = (roundNumber, e) => {\n        const newScore = parseInt(e.target.value);\n        const updatedRounds = [...rounds];\n        updatedRounds[roundNumber - 1] = newScore;\n        setRoundScore(updatedRounds);\n        updatePlayersData(updatedRounds);\n    }\n    const numberOfRoundInputs = () => {\n        let inputs = [];\n        for (let i = 1; i <= playerData.rounds.length; i++) {\n            inputs.push(\n                <td style={{width: `25px` }}>\n                    <input\n                        style={{width: `3em` }}\n                        type=\"number\"\n                        value={rounds[i - 1]} // Subtract 1 because the array is 0-based\n                        onChange={(e) => handleRoundChange(i, e)}\n                    />\n                </td>\n            );\n        }\n        return inputs;\n    };\n\n\n    return (\n        <tr align=\"center\">\n            <td>{playerName}</td>\n            <td>{total}</td>\n            {numberOfRoundInputs()}\n            <td>\n                <button onClick={onRemove}>Remove</button>\n            </td>\n        </tr>\n    )\n}\n\nexport default ScoreRow;\n","import React, { useState, useEffect } from 'react';\nimport ScoreRow from \"./ScoreRow\";\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport Container from \"react-bootstrap/Container\";\nimport {Stack} from \"react-bootstrap\";\n\nexport const ScoreBoard = ({numberOfRounds}) => {\n    const [playersData, setPlayers] =useState( JSON.parse(localStorage.getItem('playersData')) ||\n        [{name: 'shelby', rounds: [0]}]);\n    const [newPlayerName, setNewPlayerName] = useState('');\n\n    useEffect(() => {\n        localStorage.setItem('playersData', JSON.stringify(playersData));\n    }, [playersData]);\n\n    useEffect(() => {\n        setPlayers((prevPlayerStats) => {\n            const newPlayersStats = [...prevPlayerStats];\n            prevPlayerStats.map((player, index) => {\n                if (player.rounds.length < numberOfRounds) {\n                    // Add additional rounds if numberOfRounds increased\n                    for (let i = player.rounds.length; i < numberOfRounds; i++) {\n                        newPlayersStats[index].rounds.push(0);\n                    }\n                } else if (player.rounds.length > numberOfRounds) {\n                    // Remove excess rounds if numberOfRounds decreased\n                    newPlayersStats[index].rounds.splice(numberOfRounds);\n                }\n            });\n            return newPlayersStats;\n        });\n    }, [numberOfRounds]);\n\n    const handleAddPlayer = () => {\n        if (newPlayerName.trim() !== '') {\n            setPlayers([...playersData, {name: newPlayerName, rounds: Array.from({length: numberOfRounds}, () => 0)}]);\n            setNewPlayerName('');\n        }\n    }\n\n    const handleRemovePlayer = (index) => {\n        const playNameToRemove = playersData[index];\n        const shouldRemove = window.confirm(`Are you sure you want to remove ${playNameToRemove}?`);\n        if (!shouldRemove) return;\n        const updatedPlayers = [...playersData];\n        updatedPlayers.splice(index, 1);\n        setPlayers(updatedPlayers);\n    }\n\n    const roundHeaders = () => {\n        let headers = [];\n        let roundsLength = 0;\n        if (playersData && playersData[0] && playersData[0].rounds) {\n            roundsLength = playersData[0].rounds.length;\n        }\n\n        for (let i = 1; i <= roundsLength; i++) {\n            headers.push(<td key={i}>Round {i}</td>)\n        }\n        return headers;\n    }\n\n    const updatePlayersData = (index, updatedRounds) => {\n        setPlayers((prevPlayerStats) => {\n            const newPlayersStats = [...prevPlayerStats];\n            newPlayersStats[index] = { ...newPlayersStats[index], rounds: updatedRounds };\n            return newPlayersStats;\n        });\n\n        let playersData = JSON.parse(localStorage.getItem('playersData'));\n        playersData[index] = { ...playersData[index], rounds: updatedRounds };\n        localStorage.setItem('playersData', JSON.stringify(playersData));\n    };\n\n    const resetScores = () => {\n        const confirm = window.confirm('Are you sure you want to reset?');\n        if (!confirm) return;\n        setPlayers((prevPlayerStats) => {\n            const newPlayersStats = [...prevPlayerStats];\n            newPlayersStats.map((player, index) => {\n                newPlayersStats[index] = { ...newPlayersStats[index], rounds: Array.from({length: numberOfRounds}, () => 0) };\n            });\n            return newPlayersStats;\n        });\n    }\n    const handleReset = () => {\n        const confirm = window.confirm('Are you sure you want to reset?');\n        if (!confirm) return;\n        setPlayers([]);\n    }\n\n    return (\n        <div >\n            <h3>Score Board</h3>\n            <Table striped border hover responsive size=\"sm\">\n                <thead align=\"center\">\n                <tr>\n                    <td>Name</td>\n                    <td>Score</td>\n                    {roundHeaders()}\n                </tr>\n                </thead>\n                <tbody>\n                    {playersData.map((playerName, index) => (\n                        <ScoreRow\n                            playerData={playerName}\n                            numberOfRounds={numberOfRounds}\n                            onRemove={()=>handleRemovePlayer(index)}\n                            updatePlayersData={(updatedRounds) => updatePlayersData(index, updatedRounds)}\n                        />\n                    ))}\n                </tbody>\n\n            </Table>\n            <input\n                type=\"text\"\n                placeholder=\"New Player\"\n                value={newPlayerName}\n                onChange={(e) => setNewPlayerName(e.target.value)}\n            />\n            <Button onClick={handleAddPlayer}>Add Player</Button>\n            <Button variant=\"danger\" onClick={resetScores}>Reset Scores</Button>\n            <Button variant=\"danger\" onClick={handleReset}>Clear Board</Button>\n        </div >\n    );\n}\n\nexport default ScoreBoard;\n","import React, {useState, useEffect} from 'react';\nimport ScoreBoard from \"./ScoreBoard\";\nimport Container from \"react-bootstrap/Container\";\nexport const FiveCrowns = () => {\n    const [numberOfRounds, setNumberOfRounds] = useState(localStorage.getItem('numberOfRounds') || 1);\n\n    const handleNumberOfRoundsChange = (e) => {\n        setNumberOfRounds(parseInt(e.target.value));\n    }\n\n    useEffect(() => {\n        localStorage.setItem('numberOfRounds', numberOfRounds);\n    }, [numberOfRounds]);\n\n    // create a loop to create 13 option tags\n    const options = () => {\n        let options = [];\n        for (let i = 1; i <= 13; i++) {\n            options.push(<option key={i} value={i}>{i}</option>)\n        }\n        return options;\n    }\n\n    return (\n        <Container>\n            <h1>Five Crowns</h1>\n            <div>\n                <div>\n                    <label htmlFor=\"rounds\">Number of Rounds</label>\n                    <select onChange={(e)=>handleNumberOfRoundsChange(e)} value={numberOfRounds}>\n                        {options()}\n                    </select>\n                </div>\n            </div>\n            <br/>\n            <ScoreBoard numberOfRounds={numberOfRounds}/>\n        </Container>\n    );\n}\n\nexport default FiveCrowns;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router, Routes, Route, Link} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport HomePage from './components/HomePage';\nimport CowPage from './components/CowPage';\nimport FiveCrowns from './components/FiveCrowns/FiveCrowns';\nimport './index.css';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n    <Router basename=\"/cow-game\">\n        <Navbar expand=\"lg\" className=\"bg-body-tertiary\">\n            <Container>\n                <Navbar.Brand as={Link} to=\"/\">Road Games</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        <Nav.Link as={Link} to=\"/FiveCrowns\">Five Crowns</Nav.Link>\n                        <Nav.Link as={Link} to=\"/CowPage\">Cow Game</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n        <Routes>\n            <Route path=\"/\" element={<HomePage/>} />\n            <Route path=\"/CowPage\" element={<CowPage/>} />\n            <Route path=\"/FiveCrowns\" element={<FiveCrowns/>} />\n        </Routes>\n    </Router>\n);\n\n"],"sourceRoot":""}